_ = require 'lodash'
React = require 'react'
H = React.DOM
R = React.createElement

formUtils = require './formUtils'

# Rosters are repeated information, such as asking questions about household members N times.
# A roster group is a group of questions that is asked once for each roster entry
module.exports = class RosterGroupComponent extends React.Component
  @contextTypes:
    locale: React.PropTypes.string

  # TODO: Need to create a new isVisible function and pass it down to sub questions (ItemListComponent)
  # this function will need to create an id that matches the id generated by the VisibilityEntity

  @propTypes:
    rosterGroup: React.PropTypes.object.isRequired # Design of roster group. See schema
    data: React.PropTypes.object      # Current data of response. 
    onDataChange: React.PropTypes.func.isRequired   # Called when data changes
    isVisible: React.PropTypes.func.isRequired # (id) tells if an item is visible or not

  # Get the current answer value
  getAnswer: ->
    # Prefer rosterId if specified, otherwise use id. Default to array
    return @props.data[@props.item.rosterId or @props.item._id] or []

  # Propagate an answer change to the onDataChange
  handleAnswerChange: (answer) =>
    # Prefer rosterId if specified, otherwise use id. Default to array
    change = {}
    change[@props.item.rosterId or @props.item._id] = answer
    @props.onDataChange(_.extend({}, @props.data, change))

  # Handles a change in data of a specific entry of the roster
  handleEntryDataChange: (index, data) =>
    answer = @getAnswer().slice()
    answer[index] = data
    @handleAnswerChange(answer)

  handleAdd: =>
    answer = @getAnswer().slice()
    answer.push({})
    @handleAnswerChange(answer)

  handleRemove: (index) =>
    answer = @getAnswer().slice()
    answer.splice(index, 1)
    @handleAnswerChange(answer)

  scrollToInvalid: (alreadyFoundFirst) ->
    # TODO: Check if invalid and scroll if necessary
    # returns true if invalid
    return false

  renderName: ->
    H.h4 key: "prompt",
      formUtils.localizeString(@props.rosterGroup.name, @context.locale)

  renderEntry: (entry, index) ->
    # To avoid circularity
    ItemListComponent = require './ItemListComponent'

    H.div key: index, className: "panel panel-default", 
      H.div className: "panel-body",
        if @props.rosterGroup.allowRemove
          H.button type: "button", style: { float: "right" }, className: "btn btn-sm btn-link", onClick: @handleRemove.bind(null, index),
            H.span className: "glyphicon glyphicon-remove"  

        R ItemListComponent,
          contents: @props.rosterGroup.contents
          data: @props.answer[index]
          onDataChange: @handleDataChange.bind(null, index)

  renderAdd: ->
    if @props.rosterGroup.allowAdd
      H.div key: "add",
        H.button type: "button", className: "btn btn-default btn-sm", onClick: @handleAdd,
          H.span className: "glyphicon glyphicon-plus"
          " " + T("Add")

  render: ->
    H.div style: { padding: 5, marginBottom: 20 },
      @renderName()
      _.map(@props.answer, (entry, index) => @renderEntry(entry, index))

      # Display message if none
      if not @props.answer or @props.answer.length == 0
        H.div(style: { paddingLeft: 20 }, H.i(null, T("None")))

      @renderAdd() 